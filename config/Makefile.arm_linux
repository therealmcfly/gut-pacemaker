# Makefile.arm_linux - Build rules for ARM Linux target

ARM_TOOLCHAIN_PATH ?= $(HOME)/toolchains/gcc-linaro-4.9-2016.02-x86_64_arm-linux-gnueabihf
CC = $(ARM_TOOLCHAIN_PATH)/bin/arm-linux-gnueabihf-gcc
SYSROOT ?= $(HOME)/toolchains/de1soc_rootfs

# Directories
INCDIR = inc
SRCDIR = src
OBJDIR_BASE = build/arm_linux
BINDIR = .

# Variants
OBJDIR = $(OBJDIR_BASE)
BASE_NAME := pm_arm_linux
TARGET := $(BASE_NAME).o

# Source Files
SRC_FILES = \
  $(wildcard $(SRCDIR)/*.c) \
  $(wildcard $(SRCDIR)/utils/*.c) \
  $(wildcard $(SRCDIR)/api/linux/*.c) \
  $(wildcard $(SRCDIR)/platform/linux/*.c) \
  $(wildcard platforms/linux/*.c) \
  $(wildcard drivers/arm_linux/*.c) # may need to be create and set to arm_linux specific


# Object Files
OBJ_FILES = $(SRC_FILES:%.c=$(OBJDIR)/%.o)

# Include Paths
INCLUDES = \
	-I$(INCDIR)/ \
	-I$(INCDIR)/api/linux \
	-I$(INCDIR)/utils \
	-I$(INCDIR)/platform/linux

# Flags
CFLAGS = -Wall -O2 -std=gnu99 -fstack-usage -pthread -static $(INCLUDES) -march=armv7-a -mtune=cortex-a9 -mfloat-abi=hard -mfpu=neon
LDFLAGS = -pthread -static

# Default build
all: $(TARGET)

# Build executable
$(TARGET): $(OBJ_FILES)
	@mkdir -p $(BINDIR)
	@echo "ðŸ”§ Linking executable: $@"
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS)

# Compile rules
$(OBJDIR)/%.o: %.c
	@mkdir -p $(dir $@)
	$(CC) --sysroot=$(SYSROOT) $(CFLAGS) -c $< -o $@

# Targets
.PHONY: clean

# Clean targets
clean:
	@echo "ðŸ§¹ Cleaning ARM Linux build artifacts..."
	rm -rf $(OBJDIR_BASE) pm_arm_linux.o
	@echo "âœ… Clean complete."
